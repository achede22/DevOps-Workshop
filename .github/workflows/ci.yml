name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install -r app/requirements.txt

    - name: Set up Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Authenticate with Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure storage account and container exist
      env:
        AZ_RG_NAME: "terraform-resource-group"
        AZ_STORAGE_ACCOUNT_NAME: "spacelybackend"
        AZ_CONTAINER_NAME: "tfstate"
        SUBSCRIPTION_ID: "aa1c35b4-ab63-446a-8f2b-9481db0e589b"
      run: |
        # Create Resource Group if it does not exist
        az group create --name $AZ_RG_NAME --location eastus --subscription $SUBSCRIPTION_ID || echo "Resource group already exists."

        # Create Storage Account if it does not exist
        if ! az storage account show --name $AZ_STORAGE_ACCOUNT_NAME --resource-group $AZ_RG_NAME --subscription $SUBSCRIPTION_ID; then
          az storage account create --name $AZ_STORAGE_ACCOUNT_NAME --resource-group $AZ_RG_NAME --location eastus --sku Standard_LRS --subscription $SUBSCRIPTION_ID
        fi

        # Get the storage account key
        AZ_STORAGE_KEY=$(az storage account keys list --resource-group $AZ_RG_NAME --account-name $AZ_STORAGE_ACCOUNT_NAME --query '[0].value' --output tsv --subscription $SUBSCRIPTION_ID)

        # Create blob container if it does not exist
        az storage container create --name $AZ_CONTAINER_NAME --account-name $AZ_STORAGE_ACCOUNT_NAME --account-key $AZ_STORAGE_KEY --subscription $SUBSCRIPTION_ID || echo "Container already exists."

    - name: Initialize Terraform
      run: terraform init -backend-config="resource_group_name=${{ env.AZ_RG_NAME }}" -backend-config="storage_account_name=${{ env.AZ_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.AZ_CONTAINER_NAME }}" -backend-config="key=terraform.tfstate"

    - name: Plan Terraform
      run: terraform plan

    - name: Apply Terraform
      run: terraform apply -auto-approve

    - name: Read version from file
      id: version
      run: echo "::set-output name=VERSION::$(cat app/version.txt)"

    - name: Build Docker image
      run: |
        docker build --build-arg VERSION=${{ steps.version.outputs.VERSION }} -t spacelysprockets.azurecr.io/visitor-counter:${{ steps.version.outputs.VERSION }} -f app/Dockerfile app

    - name: Log in to Azure Container Registry
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login spacelysprockets.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Push Docker image to Azure Container Registry
      run: docker push spacelysprocketshd.azurecr.io/visitor-counter:${{ steps.version.outputs.VERSION }}